<?php
/**
 * EnhancedCurrencyConversionData
 *
 * PHP version 5
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Enhanced Currency Conversion Calculator
 *
 * The Enhanced Currency Conversion Calculator is a subscription-based service that provides access to Mastercard's current dates currency conversion rates as well as historical currency conversion rates. Additionally, the API provides access to European Central Bank (ECB) reference rates that European Economic Area (EEA) issuing customer may require for the purposes of compliance with EU Regulation 2019/518
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalEnablementClient\Model;

use \ArrayAccess;
use \DigitalEnablementClient\ObjectSerializer;

/**
 * EnhancedCurrencyConversionData Class Doc Comment
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EnhancedCurrencyConversionData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EnhancedCurrencyConversionData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'trans_curr' => 'string',
        'crdhld_bill_curr' => 'string',
        'rate_date' => 'string',
        'trans_amt' => 'float',
        'bank_fee_pct' => 'float',
        'bank_fee_fixed' => 'float',
        'mastercard' => '\DigitalEnablementClient\Model\MastercardConversionObject',
        'ecb' => '\DigitalEnablementClient\Model\ECBConversionObject',
        'effective_conversion_rate' => 'float',
        'pct_difference_mastercard_excl_all_fees_and_ecb' => 'float',
        'pct_difference_mastercard_incl_all_fees_and_ecb' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'trans_curr' => null,
        'crdhld_bill_curr' => null,
        'rate_date' => null,
        'trans_amt' => null,
        'bank_fee_pct' => null,
        'bank_fee_fixed' => null,
        'mastercard' => null,
        'ecb' => null,
        'effective_conversion_rate' => null,
        'pct_difference_mastercard_excl_all_fees_and_ecb' => null,
        'pct_difference_mastercard_incl_all_fees_and_ecb' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trans_curr' => 'transCurr',
        'crdhld_bill_curr' => 'crdhldBillCurr',
        'rate_date' => 'rateDate',
        'trans_amt' => 'transAmt',
        'bank_fee_pct' => 'bankFeePct',
        'bank_fee_fixed' => 'bankFeeFixed',
        'mastercard' => 'mastercard',
        'ecb' => 'ecb',
        'effective_conversion_rate' => 'effectiveConversionRate',
        'pct_difference_mastercard_excl_all_fees_and_ecb' => 'pctDifferenceMastercardExclAllFeesAndEcb',
        'pct_difference_mastercard_incl_all_fees_and_ecb' => 'pctDifferenceMastercardInclAllFeesAndEcb'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trans_curr' => 'setTransCurr',
        'crdhld_bill_curr' => 'setCrdhldBillCurr',
        'rate_date' => 'setRateDate',
        'trans_amt' => 'setTransAmt',
        'bank_fee_pct' => 'setBankFeePct',
        'bank_fee_fixed' => 'setBankFeeFixed',
        'mastercard' => 'setMastercard',
        'ecb' => 'setEcb',
        'effective_conversion_rate' => 'setEffectiveConversionRate',
        'pct_difference_mastercard_excl_all_fees_and_ecb' => 'setPctDifferenceMastercardExclAllFeesAndEcb',
        'pct_difference_mastercard_incl_all_fees_and_ecb' => 'setPctDifferenceMastercardInclAllFeesAndEcb'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trans_curr' => 'getTransCurr',
        'crdhld_bill_curr' => 'getCrdhldBillCurr',
        'rate_date' => 'getRateDate',
        'trans_amt' => 'getTransAmt',
        'bank_fee_pct' => 'getBankFeePct',
        'bank_fee_fixed' => 'getBankFeeFixed',
        'mastercard' => 'getMastercard',
        'ecb' => 'getEcb',
        'effective_conversion_rate' => 'getEffectiveConversionRate',
        'pct_difference_mastercard_excl_all_fees_and_ecb' => 'getPctDifferenceMastercardExclAllFeesAndEcb',
        'pct_difference_mastercard_incl_all_fees_and_ecb' => 'getPctDifferenceMastercardInclAllFeesAndEcb'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trans_curr'] = isset($data['trans_curr']) ? $data['trans_curr'] : null;
        $this->container['crdhld_bill_curr'] = isset($data['crdhld_bill_curr']) ? $data['crdhld_bill_curr'] : null;
        $this->container['rate_date'] = isset($data['rate_date']) ? $data['rate_date'] : null;
        $this->container['trans_amt'] = isset($data['trans_amt']) ? $data['trans_amt'] : null;
        $this->container['bank_fee_pct'] = isset($data['bank_fee_pct']) ? $data['bank_fee_pct'] : null;
        $this->container['bank_fee_fixed'] = isset($data['bank_fee_fixed']) ? $data['bank_fee_fixed'] : null;
        $this->container['mastercard'] = isset($data['mastercard']) ? $data['mastercard'] : null;
        $this->container['ecb'] = isset($data['ecb']) ? $data['ecb'] : null;
        $this->container['effective_conversion_rate'] = isset($data['effective_conversion_rate']) ? $data['effective_conversion_rate'] : null;
        $this->container['pct_difference_mastercard_excl_all_fees_and_ecb'] = isset($data['pct_difference_mastercard_excl_all_fees_and_ecb']) ? $data['pct_difference_mastercard_excl_all_fees_and_ecb'] : null;
        $this->container['pct_difference_mastercard_incl_all_fees_and_ecb'] = isset($data['pct_difference_mastercard_incl_all_fees_and_ecb']) ? $data['pct_difference_mastercard_incl_all_fees_and_ecb'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trans_curr
     *
     * @return string|null
     */
    public function getTransCurr()
    {
        return $this->container['trans_curr'];
    }

    /**
     * Sets trans_curr
     *
     * @param string|null $trans_curr Currency of the transaction as provided in the API request
     *
     * @return $this
     */
    public function setTransCurr($trans_curr)
    {
        $this->container['trans_curr'] = $trans_curr;

        return $this;
    }

    /**
     * Gets crdhld_bill_curr
     *
     * @return string|null
     */
    public function getCrdhldBillCurr()
    {
        return $this->container['crdhld_bill_curr'];
    }

    /**
     * Sets crdhld_bill_curr
     *
     * @param string|null $crdhld_bill_curr Cardholder billing currency as provided in the API request
     *
     * @return $this
     */
    public function setCrdhldBillCurr($crdhld_bill_curr)
    {
        $this->container['crdhld_bill_curr'] = $crdhld_bill_curr;

        return $this;
    }

    /**
     * Gets rate_date
     *
     * @return string|null
     */
    public function getRateDate()
    {
        return $this->container['rate_date'];
    }

    /**
     * Sets rate_date
     *
     * @param string|null $rate_date The date of the requested rates
     *
     * @return $this
     */
    public function setRateDate($rate_date)
    {
        $this->container['rate_date'] = $rate_date;

        return $this;
    }

    /**
     * Gets trans_amt
     *
     * @return float|null
     */
    public function getTransAmt()
    {
        return $this->container['trans_amt'];
    }

    /**
     * Sets trans_amt
     *
     * @param float|null $trans_amt Amount in transaction currency as provided in the API request
     *
     * @return $this
     */
    public function setTransAmt($trans_amt)
    {
        $this->container['trans_amt'] = $trans_amt;

        return $this;
    }

    /**
     * Gets bank_fee_pct
     *
     * @return float|null
     */
    public function getBankFeePct()
    {
        return $this->container['bank_fee_pct'];
    }

    /**
     * Sets bank_fee_pct
     *
     * @param float|null $bank_fee_pct Percentage bank fee as provided in the API request
     *
     * @return $this
     */
    public function setBankFeePct($bank_fee_pct)
    {
        $this->container['bank_fee_pct'] = $bank_fee_pct;

        return $this;
    }

    /**
     * Gets bank_fee_fixed
     *
     * @return float|null
     */
    public function getBankFeeFixed()
    {
        return $this->container['bank_fee_fixed'];
    }

    /**
     * Sets bank_fee_fixed
     *
     * @param float|null $bank_fee_fixed Fixed bank fee as provided in the API request
     *
     * @return $this
     */
    public function setBankFeeFixed($bank_fee_fixed)
    {
        $this->container['bank_fee_fixed'] = $bank_fee_fixed;

        return $this;
    }

    /**
     * Gets mastercard
     *
     * @return \DigitalEnablementClient\Model\MastercardConversionObject|null
     */
    public function getMastercard()
    {
        return $this->container['mastercard'];
    }

    /**
     * Sets mastercard
     *
     * @param \DigitalEnablementClient\Model\MastercardConversionObject|null $mastercard mastercard
     *
     * @return $this
     */
    public function setMastercard($mastercard)
    {
        $this->container['mastercard'] = $mastercard;

        return $this;
    }

    /**
     * Gets ecb
     *
     * @return \DigitalEnablementClient\Model\ECBConversionObject|null
     */
    public function getEcb()
    {
        return $this->container['ecb'];
    }

    /**
     * Sets ecb
     *
     * @param \DigitalEnablementClient\Model\ECBConversionObject|null $ecb ecb
     *
     * @return $this
     */
    public function setEcb($ecb)
    {
        $this->container['ecb'] = $ecb;

        return $this;
    }

    /**
     * Gets effective_conversion_rate
     *
     * @return float|null
     */
    public function getEffectiveConversionRate()
    {
        return $this->container['effective_conversion_rate'];
    }

    /**
     * Sets effective_conversion_rate
     *
     * @param float|null $effective_conversion_rate Calculated effective exchange rate for the requested currency pair including all issuer-to-cardholder fees. This is calculated by dividing cardholder billing amount including all fees divided by the transaction amount (crdhldBillAmtInclAllFees / transAmount)
     *
     * @return $this
     */
    public function setEffectiveConversionRate($effective_conversion_rate)
    {
        $this->container['effective_conversion_rate'] = $effective_conversion_rate;

        return $this;
    }

    /**
     * Gets pct_difference_mastercard_excl_all_fees_and_ecb
     *
     * @return float|null
     */
    public function getPctDifferenceMastercardExclAllFeesAndEcb()
    {
        return $this->container['pct_difference_mastercard_excl_all_fees_and_ecb'];
    }

    /**
     * Sets pct_difference_mastercard_excl_all_fees_and_ecb
     *
     * @param float|null $pct_difference_mastercard_excl_all_fees_and_ecb Calculated percentage difference between Mastercard Conversion Rate excluding all issuer-to-cardholder fees for the selected currency pair and the ECB Reference Rate
     *
     * @return $this
     */
    public function setPctDifferenceMastercardExclAllFeesAndEcb($pct_difference_mastercard_excl_all_fees_and_ecb)
    {
        $this->container['pct_difference_mastercard_excl_all_fees_and_ecb'] = $pct_difference_mastercard_excl_all_fees_and_ecb;

        return $this;
    }

    /**
     * Gets pct_difference_mastercard_incl_all_fees_and_ecb
     *
     * @return float|null
     */
    public function getPctDifferenceMastercardInclAllFeesAndEcb()
    {
        return $this->container['pct_difference_mastercard_incl_all_fees_and_ecb'];
    }

    /**
     * Sets pct_difference_mastercard_incl_all_fees_and_ecb
     *
     * @param float|null $pct_difference_mastercard_incl_all_fees_and_ecb Calculated percentage difference between Mastercard Conversion Rate Including all issuer-to-cardholder fees (fixed and percentage) for the selected currency pair and the ECB Reference Rate ([effectiveConversionRate/ecbReferenceRateDate]-1*100)
     *
     * @return $this
     */
    public function setPctDifferenceMastercardInclAllFeesAndEcb($pct_difference_mastercard_incl_all_fees_and_ecb)
    {
        $this->container['pct_difference_mastercard_incl_all_fees_and_ecb'] = $pct_difference_mastercard_incl_all_fees_and_ecb;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


