<?php
/**
 * MastercardConversionObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Enhanced Currency Conversion Calculator
 *
 * The Enhanced Currency Conversion Calculator is a subscription-based service that provides access to Mastercard's current dates currency conversion rates as well as historical currency conversion rates. Additionally, the API provides access to European Central Bank (ECB) reference rates that European Economic Area (EEA) issuing customer may require for the purposes of compliance with EU Regulation 2019/518
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DigitalEnablementClient\Model;

use \ArrayAccess;
use \DigitalEnablementClient\ObjectSerializer;

/**
 * MastercardConversionObject Class Doc Comment
 *
 * @category Class
 * @package  DigitalEnablementClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MastercardConversionObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MastercardConversionObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'crdhld_bill_amt_excl_all_fees' => 'float',
        'crdhld_bill_amt_incl_all_fees' => 'float',
        'mastercard_conv_rate_excl_all_fees' => 'float',
        'mastercard_conv_rate_incl_pct_fee' => 'float',
        'mastercard_fx_rate_date' => 'string',
        'message' => 'string',
        'reason_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'crdhld_bill_amt_excl_all_fees' => null,
        'crdhld_bill_amt_incl_all_fees' => null,
        'mastercard_conv_rate_excl_all_fees' => null,
        'mastercard_conv_rate_incl_pct_fee' => null,
        'mastercard_fx_rate_date' => null,
        'message' => null,
        'reason_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'crdhld_bill_amt_excl_all_fees' => 'crdhldBillAmtExclAllFees',
        'crdhld_bill_amt_incl_all_fees' => 'crdhldBillAmtInclAllFees',
        'mastercard_conv_rate_excl_all_fees' => 'mastercardConvRateExclAllFees',
        'mastercard_conv_rate_incl_pct_fee' => 'mastercardConvRateInclPctFee',
        'mastercard_fx_rate_date' => 'mastercardFxRateDate',
        'message' => 'message',
        'reason_code' => 'reasonCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'crdhld_bill_amt_excl_all_fees' => 'setCrdhldBillAmtExclAllFees',
        'crdhld_bill_amt_incl_all_fees' => 'setCrdhldBillAmtInclAllFees',
        'mastercard_conv_rate_excl_all_fees' => 'setMastercardConvRateExclAllFees',
        'mastercard_conv_rate_incl_pct_fee' => 'setMastercardConvRateInclPctFee',
        'mastercard_fx_rate_date' => 'setMastercardFxRateDate',
        'message' => 'setMessage',
        'reason_code' => 'setReasonCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'crdhld_bill_amt_excl_all_fees' => 'getCrdhldBillAmtExclAllFees',
        'crdhld_bill_amt_incl_all_fees' => 'getCrdhldBillAmtInclAllFees',
        'mastercard_conv_rate_excl_all_fees' => 'getMastercardConvRateExclAllFees',
        'mastercard_conv_rate_incl_pct_fee' => 'getMastercardConvRateInclPctFee',
        'mastercard_fx_rate_date' => 'getMastercardFxRateDate',
        'message' => 'getMessage',
        'reason_code' => 'getReasonCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['crdhld_bill_amt_excl_all_fees'] = isset($data['crdhld_bill_amt_excl_all_fees']) ? $data['crdhld_bill_amt_excl_all_fees'] : null;
        $this->container['crdhld_bill_amt_incl_all_fees'] = isset($data['crdhld_bill_amt_incl_all_fees']) ? $data['crdhld_bill_amt_incl_all_fees'] : null;
        $this->container['mastercard_conv_rate_excl_all_fees'] = isset($data['mastercard_conv_rate_excl_all_fees']) ? $data['mastercard_conv_rate_excl_all_fees'] : null;
        $this->container['mastercard_conv_rate_incl_pct_fee'] = isset($data['mastercard_conv_rate_incl_pct_fee']) ? $data['mastercard_conv_rate_incl_pct_fee'] : null;
        $this->container['mastercard_fx_rate_date'] = isset($data['mastercard_fx_rate_date']) ? $data['mastercard_fx_rate_date'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets crdhld_bill_amt_excl_all_fees
     *
     * @return float|null
     */
    public function getCrdhldBillAmtExclAllFees()
    {
        return $this->container['crdhld_bill_amt_excl_all_fees'];
    }

    /**
     * Sets crdhld_bill_amt_excl_all_fees
     *
     * @param float|null $crdhld_bill_amt_excl_all_fees Cardholder billing amount calculated by using the Mastercard conversion rate, excluding any applicable issuer-to-cardholder fees
     *
     * @return $this
     */
    public function setCrdhldBillAmtExclAllFees($crdhld_bill_amt_excl_all_fees)
    {
        $this->container['crdhld_bill_amt_excl_all_fees'] = $crdhld_bill_amt_excl_all_fees;

        return $this;
    }

    /**
     * Gets crdhld_bill_amt_incl_all_fees
     *
     * @return float|null
     */
    public function getCrdhldBillAmtInclAllFees()
    {
        return $this->container['crdhld_bill_amt_incl_all_fees'];
    }

    /**
     * Sets crdhld_bill_amt_incl_all_fees
     *
     * @param float|null $crdhld_bill_amt_incl_all_fees Cardholder Billing Amount as calculated by applying the Mastercard Conversion Rate, including any applicable issuer-to-cardholder fees (percentage and fixed)
     *
     * @return $this
     */
    public function setCrdhldBillAmtInclAllFees($crdhld_bill_amt_incl_all_fees)
    {
        $this->container['crdhld_bill_amt_incl_all_fees'] = $crdhld_bill_amt_incl_all_fees;

        return $this;
    }

    /**
     * Gets mastercard_conv_rate_excl_all_fees
     *
     * @return float|null
     */
    public function getMastercardConvRateExclAllFees()
    {
        return $this->container['mastercard_conv_rate_excl_all_fees'];
    }

    /**
     * Sets mastercard_conv_rate_excl_all_fees
     *
     * @param float|null $mastercard_conv_rate_excl_all_fees Mastercard exchange rate for the requested currency pair excluding any issuer-to-cardholder fees
     *
     * @return $this
     */
    public function setMastercardConvRateExclAllFees($mastercard_conv_rate_excl_all_fees)
    {
        $this->container['mastercard_conv_rate_excl_all_fees'] = $mastercard_conv_rate_excl_all_fees;

        return $this;
    }

    /**
     * Gets mastercard_conv_rate_incl_pct_fee
     *
     * @return float|null
     */
    public function getMastercardConvRateInclPctFee()
    {
        return $this->container['mastercard_conv_rate_incl_pct_fee'];
    }

    /**
     * Sets mastercard_conv_rate_incl_pct_fee
     *
     * @param float|null $mastercard_conv_rate_incl_pct_fee Mastercard exchange rate for the requested currency pair including issuer-to-cardholder percentage rate fee as provided by the issuer in the API call
     *
     * @return $this
     */
    public function setMastercardConvRateInclPctFee($mastercard_conv_rate_incl_pct_fee)
    {
        $this->container['mastercard_conv_rate_incl_pct_fee'] = $mastercard_conv_rate_incl_pct_fee;

        return $this;
    }

    /**
     * Gets mastercard_fx_rate_date
     *
     * @return string|null
     */
    public function getMastercardFxRateDate()
    {
        return $this->container['mastercard_fx_rate_date'];
    }

    /**
     * Sets mastercard_fx_rate_date
     *
     * @param string|null $mastercard_fx_rate_date Date of Mastercard issued conversion rates. The date can differ to the requested rate date if no new rates are published for the requested date or if the user requests for a historical date
     *
     * @return $this
     */
    public function setMastercardFxRateDate($mastercard_fx_rate_date)
    {
        $this->container['mastercard_fx_rate_date'] = $mastercard_fx_rate_date;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message User friendly message (if applicable)
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string|null
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string|null $reason_code User friendly reason code (if applicable)
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


