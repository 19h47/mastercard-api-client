/**
 * Enhanced Currency Conversion Calculator
 * The Enhanced Currency Conversion Calculator is a subscription-based service that provides access to Mastercard's current dates currency conversion rates as well as historical currency conversion rates. Additionally, the API provides access to European Central Bank (ECB) reference rates that European Economic Area (EEA) issuing customer may require for the purposes of compliance with EU Regulation 2019/518
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
	if (typeof define === "function" && define.amd) {
		// AMD. Register as an anonymous module.
		define(["ApiClient"], factory);
	} else if (typeof module === "object" && module.exports) {
		// CommonJS-like environments that support module.exports, like Node.
		module.exports = factory(require("../ApiClient"));
	} else {
		// Browser globals (root is window)
		if (!root.EnhancedCurrencyConversionCalculator) {
			root.EnhancedCurrencyConversionCalculator = {};
		}
		root.EnhancedCurrencyConversionCalculator.EcbError = factory(
			root.EnhancedCurrencyConversionCalculator.ApiClient
		);
	}
})(this, function (ApiClient) {
	"use strict";

	/**
	 * The EcbError model module.
	 * @module model/EcbError
	 * @version 1.0.0
	 */

	/**
	 * Constructs a new <code>EcbError</code>.
	 * @alias module:model/EcbError
	 * @class
	 */
	var exports = function () {
		var _this = this;
	};

	/**
	 * Constructs a <code>EcbError</code> from a plain JavaScript object, optionally creating a new instance.
	 * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
	 * @param {Object} data The plain JavaScript object bearing properties of interest.
	 * @param {module:model/EcbError} obj Optional instance to populate.
	 * @return {module:model/EcbError} The populated <code>EcbError</code> instance.
	 */
	exports.constructFromObject = function (data, obj) {
		if (data) {
			obj = obj || new exports();
			if (data.hasOwnProperty("Description")) {
				obj["Description"] = ApiClient.convertToType(
					data["Description"],
					"String"
				);
			}
			if (data.hasOwnProperty("Details")) {
				obj["Details"] = ApiClient.convertToType(
					data["Details"],
					"String"
				);
			}
			if (data.hasOwnProperty("ReasonCode")) {
				obj["ReasonCode"] = ApiClient.convertToType(
					data["ReasonCode"],
					"String"
				);
			}
			if (data.hasOwnProperty("Recoverable")) {
				obj["Recoverable"] = ApiClient.convertToType(
					data["Recoverable"],
					"Boolean"
				);
			}
			if (data.hasOwnProperty("Source")) {
				obj["Source"] = ApiClient.convertToType(
					data["Source"],
					"String"
				);
			}
		}
		return obj;
	};

	/**
	 * Short description of the ReasonCode field.
	 * @member {String} Description
	 */
	exports.prototype["Description"] = undefined;
	/**
	 * Where appropriate, indicates detailed information about data received and calculated during request processing, to help the user with diagnosing errors.
	 * @member {String} Details
	 */
	exports.prototype["Details"] = undefined;
	/**
	 * A unique constant identifying the error case encountered during transaction processing. For example, INVALID_SIGNATURE is used when the request signature does not match the expected one.
	 * @member {String} ReasonCode
	 */
	exports.prototype["ReasonCode"] = undefined;
	/**
	 * Indicates whether this error will always be returned for this request, or retrying could change the outcome. For example, if the request contains an invalid   signature, retrying will never result in a success. However, if the error is related to some unexpected timeout with the service, retrying the call could result in a successful response.
	 * @member {Boolean} Recoverable
	 */
	exports.prototype["Recoverable"] = undefined;
	/**
	 * The name of the application that generated this error
	 * @member {String} Source
	 */
	exports.prototype["Source"] = undefined;

	return exports;
});
